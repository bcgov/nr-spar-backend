apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: ${NAME}
  annotations:
    description: "NR SPAR Backend API"
    tags: "nr-spar-backend"
    iconClass: icon-java
labels:
  app: ${NAME}-${ZONE}
  app.kubernetes.io/part-of: ${NAME}-${ZONE}
parameters:
  - name: NAME
    description: Module name
    value: nr-spar-backend
  - name: COMPONENT
    description: Component name
    value: spar-api
  - name: ZONE
    description: Deployment zone, e.g. pr-### or prod
    required: true
  - name: IMAGE_TAG
    description: Image tag to use
    value: latest
  - name: DOMAIN
    value: apps.silver.devops.gov.bc.ca
  - name: CPU_REQUEST
    value: 100m
  - name: MEMORY_REQUEST
    value: 0.5Gi
  - name: REGISTRY
    description: Container registry to import from (internal is image-registry.openshift-image-registry.svc:5000)
    value: ghcr.io
  - name: PROMOTE
    description: Image (namespace/name:tag) to promote/import
    value: bcgov/nr-spar-backend:prod-spar-api
  - name: NR_SPAR_BACKEND_VERSION
    description: Current SPAR backend API release version
    required: true
  - name: ALLOWED_ORIGINS
    description: Sets all the allowed request origins
    required: true
  - name: DATABASE_HOST
    description: Where the database is hosted
    required: true
  - name: DATABASE_PORT
    description: The port to be used for the connection to the database
    required: true
  - name: DATABASE_NAME
    description: The database's name
    required: true
  - name: DATABASE_USER
    description: User for the database connection
    required: true
  - name: DATABASE_PASSWORD
    description: Password for the database connection
    required: true
  - name: KEYCLOAK_REALM_URL
    description: Keycloak realm address
    required: true
objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      lookupPolicy:
        local: false
      tags:
        - name: ${IMAGE_TAG}
          from:
            kind: DockerImage
            name: ${REGISTRY}/${PROMOTE}
          referencePolicy:
            type: Local
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      replicas: 1
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${NAME}
            from:
              kind: ImageStreamTag
              name: ${NAME}-${ZONE}-${COMPONENT}:${IMAGE_TAG}
      selector:
        deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            app: ${NAME}-${ZONE}
            deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
        spec:
          containers:
            - image: ${NAME}-${ZONE}-${COMPONENT}:${IMAGE_TAG}
              imagePullPolicy: Always
              name: ${NAME}
              env:
                - name: NR_SPAR_BACKEND_VERSION
                  value: ${NR_SPAR_BACKEND_VERSION}
                - name: ALLOWED_ORIGINS
                  value: ${ALLOWED_ORIGINS}
                - name: DATABASE_HOST
                  value: ${DATABASE_HOST}
                - name: DATABASE_PORT
                  value: ${DATABASE_PORT}
                - name: DATABASE_NAME
                  value: ${DATABASE_NAME}
                - name: DATABASE_USER
                  value: ${DATABASE_USER}
                - name: DATABASE_PASSWORD
                  value: ${DATABASE_PASSWORD}
                - name: KEYCLOAK_REALM_URL
                  value: ${KEYCLOAK_REALM_URL}
              ports:
                - containerPort: 8090
                  protocol: TCP
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
              readinessProbe:
                httpGet:
                  path: /check
                  port: 8090
                  scheme: HTTP
                initialDelaySeconds: 120
                periodSeconds: 15
                timeoutSeconds: 10
              livenessProbe:
                successThreshold: 1
                failureThreshold: 3
                httpGet:
                  path: /check
                  port: 8090
                  scheme: HTTP
                initialDelaySeconds: 120
                periodSeconds: 30
                timeoutSeconds: 10
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      ports:
        - name: 8090-tcp
          protocol: TCP
          port: 80
          targetPort: 8090
      selector:
        deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      host: ${NAME}-${ZONE}-${COMPONENT}.${DOMAIN}
      port:
        targetPort: 8090-tcp
      to:
        kind: Service
        name: ${NAME}-${ZONE}-${COMPONENT}
        weight: 100
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
