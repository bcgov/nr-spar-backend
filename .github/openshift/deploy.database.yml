apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: ${NAME}
  annotations:
    description: "NR SPAR database"
    tags: "nr-spar-backend,database"
    iconClass: iconpostgresql
labels:
  app: ${NAME}-${ZONE}
  app.kubernetes.io/part-of: ${NAME}-${ZONE}
parameters:
  - name: NAME
    description: Product name
    value: nr-spar-backend
  - name: COMPONENT
    description: Component name
    value: database
  - name: ZONE
    description: Deployment zone, e.g. pr-### or prod
    required: true
  - name: IMAGE_TAG
    description: Image tag to use
    value: latest
  - description: Password for the PostgreSQL connection user.
    from: "[a-zA-Z0-9]{16}"
    generate: expression
    name: DATABASE_PASSWORD
  - description: Volume space available for data, e.g. 512Mi, 2Gi.
    displayName: Database Volume Capacity
    name: DB_PVC_SIZE
    required: true
    value: 1Gi
  - name: REGISTRY
    value: docker.io
  - name: PROMOTE
    description: Image (namespace/name:tag) to promote/import
    value: postgis/postgis:15-3.3
objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: ${NAME}-${ZONE}-${COMPONENT}
      labels:
        app: ${NAME}-${ZONE}
    stringData:
      database-name: ${NAME}
      database-password: ${DATABASE_PASSWORD}
      database-user: ${NAME}
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: ${NAME}-${ZONE}-${COMPONENT}
      labels:
        app: ${NAME}-${ZONE}
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: "${DB_PVC_SIZE}"
      storageClassName: netapp-file-standard
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: ${NAME}-${ZONE}-${COMPONENT}
      labels:
        app: ${NAME}-${ZONE}
    spec:
      lookupPolicy:
        local: false
      tags:
      - name: ${IMAGE_TAG}
        from:
          kind: DockerImage
          name: ${REGISTRY}/${PROMOTE}
        referencePolicy:
          type: Local
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${NAME}-${ZONE}-${COMPONENT}
      labels:
        app: ${NAME}-${ZONE}
    spec:
      replicas: 1
      triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
          - ${NAME}
          from:
            kind: ImageStreamTag
            name: ${NAME}-${ZONE}-${COMPONENT}:${IMAGE_TAG}
      selector:
        deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
      strategy:
        type: Recreate
        recreateParams:
          timeoutSeconds: 600
        activeDeadlineSeconds: 21600
      template:
        metadata:
          name: ${NAME}-${ZONE}-${COMPONENT}
          labels:
            app: ${NAME}-${ZONE}
            deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
        spec:
          volumes:
            - name: ${NAME}-${ZONE}-${COMPONENT}
              persistentVolumeClaim:
                claimName: ${NAME}-${ZONE}-${COMPONENT}
          containers:
            - name: ${NAME}
              image: ${NAME}-${ZONE}-${COMPONENT}:${IMAGE_TAG}
              ports:
                - containerPort: 5432
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                    - /usr/bin/env
                    - bash
                    - '-c'
                    - >-
                      psql -q -d
                      $POSTGRESQL_DATABASE -c 'SELECT 1'
                failureThreshold: 5
                initialDelaySeconds: 60
                periodSeconds: 15
                timeoutSeconds: 10
              livenessProbe:
                exec:
                  command:
                    - /usr/bin/env
                    - bash
                    - '-c'
                    - >-
                      psql -q -d
                      $POSTGRESQL_DATABASE -c 'SELECT 1'
                failureThreshold: 5
                initialDelaySeconds: 60
                periodSeconds: 15
                timeoutSeconds: 10
              env:
                - name: POSTGRESQL_DATABASE
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-${COMPONENT}
                      key: database-name
                - name: POSTGRESQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-${COMPONENT}
                      key: database-password
                - name: POSTGRESQL_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-${COMPONENT}
                      key: database-user
              volumeMounts:
                - name: ${NAME}-${ZONE}-${COMPONENT}
                  mountPath: "/var/lib/pgsql/data"
              terminationMessagePath: "/dev/termination-log"
              terminationMessagePolicy: File
              imagePullPolicy: Always
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          schedulerName: default-scheduler
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      ports:
        - name: postgresql
          nodePort: 0
          port: 5432
          protocol: TCP
          targetPort: 5432
      selector:
        deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
      sessionAffinity: None
      type: ClusterIP
