name: Merge to Main

on:
  push:
    branches:
      - main
    paths-ignore:
      - "**.md"
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  NAME: nr-spar-backend

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  # https://github.com/marketplace/actions/ghcr-io-container-cleanup
  cleanup-ghcr:
    name: Cleanup Container Registry
    runs-on: ubuntu-latest
    steps:
      - name: Delete old packages
        uses: davahome/ghcr-cleanup@v1.1.0.1
        with:
          delete_untagged: 1
          keep_versions: 10
          keep_versions_untagged: 0
          minimum_days: 14
          owner: orgs/bcgov
          package: ${{ github.event.repository.name }}
          skip_tags: prod-spar-api
          token: ${{ secrets.GITHUB_TOKEN }}

  codeql:
    name: Semantic Code Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Initialize
        uses: github/codeql-action/init@v2
        with:
          debug: true
          languages: java

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
      # If this step fails, then you should remove it and run the build manually (see below)
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # SonarCloud runs in the main branch are needed to compare against PRs
  sonarcloud:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v2
        with:
          path: |
            ~/.m2
          key: ${{ runner.os }}-maven-test-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-test-

      - name: Cache SonarCloud packages
        uses: actions/cache@v2
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Unit Tests
        run: mvn --no-transfer-progress test --file pom.xml

      - name: Integration Tests
        run: mvn --no-transfer-progress verify -P integration-test --file pom.xml

      - name: Code Coverage
        run: mvn --no-transfer-progress clean verify -P all-tests --file pom.xml

      - name: Generate JaCoCo Badge
        uses: cicirello/jacoco-badge-generator@v2
        id: jacoco
        with:
          generate-branches-badge: true
          jacoco-csv-file: target/coverage-reports/merged-test-report/jacoco.csv

      - name: Log coverage percentage
        run: |
          echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
          echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"

      - name: Commit the badge (if it changed)
        run: |
          if [[ `git status --porcelain` ]]; then
            git config --global user.name 'CI Bot'
            git config --global user.email 'cibot@users.noreply.github.com'
            git add -A
            git commit -m "ci: autogenerated JaCoCo coverage badge"
            git push
          fi

      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v2
        with:
          name: jacoco-report
          path: target/coverage-reports/merged-test-report/

      - name: SonarCloud Scan
        run: mvn --no-transfer-progress clean verify package -P all-tests sonar:sonar -Dsonar.projectKey=bcgov_nr-spar-backend -Dsonar.coverage.jacoco.xmlReportPaths=target/coverage-reports/merged-test-report/jacoco.xml --file pom.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Generate release notes and update new version
  release:
    name: Release Notes
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.changelog.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT }}
          fetch-depth: 0

      - uses: actions/cache@v2
        with:
          path: |
            ~/.m2
          key: ${{ runner.os }}-maven-test-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-test-

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Conventional Changelog Update
        continue-on-error: true
        uses: TriPSs/conventional-changelog-action@v3
        id: changelog
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          output-file: 'CHANGELOG.md'
          skip-version-file: 'true'
          skip-commit: 'true'
          git-push: 'false'
          skip-on-empty: 'false'

      - name: Set new version
        run: |
          echo "::set-output name=version::${{ steps.changelog.outputs.version }}"
          mvn versions:set -DnewVersion='${{ steps.changelog.outputs.version }}' -f pom.xml -DskipTests -Dtests.skip=true -Dskip.unit.tests=true

      - name: Update POM
        run: mvn versions:commit

      - name: Commit pom and changelog
        uses: EndBug/add-and-commit@v9
        with:
          author_name: Ci Bot
          author_email: cibot@users.noreply.github.com
          message: 'doc: updating pom to ${{ steps.changelog.outputs.version }} [ci skip]'
          add: '["pom.xml","CHANGELOG.md"]'

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.changelog.outputs.tag }}
          release_name: ${{ steps.changelog.outputs.tag }}
          body: ${{ steps.changelog.outputs.clean_changelog }}

  deploy-test:
    name: TEST Deployment
    needs:
      - cleanup-ghcr
      - codeql
      - sonarcloud
      - release
    runs-on: ubuntu-latest
    environment:
      name: test
    env:
      ZONE: test
      NR_SPAR_BACKEND_VERSION: ${{ needs.release.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - name: Print NR_SPAR_BACKEND_VERSION env
        run: echo NR_SPAR_BACKEND_VERSION:test-${{ env.NR_SPAR_BACKEND_VERSION }}
      - name: Deploy
        run: |
          # Login to OpenShift and select project
          oc login --token=${{ secrets.OC_TOKEN }} --server=${{ secrets.OC_SERVER }}
          oc project ${{ secrets.OC_NAMESPACE }}
          # Do not replace database; 'oc create' kicks up an error if objects already exist
          #oc process -f .github/openshift/deploy.database.yml -p ZONE=${{ env.ZONE }} | oc create -f - || true
          # Process and apply deployment templates
          oc process -f .github/openshift/deploy.backend.yml -p ZONE=${{ env.ZONE }} \
            -p NR_SPAR_BACKEND_VERSION=test-${{ env.NR_SPAR_BACKEND_VERSION }} \
            -p ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS }} \
            -p KEYCLOAK_REALM_URL=${{ secrets.KEYCLOAK_REALM_URL }} \
            -p DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
            -p PROMOTE=${{ github.repository }}:${{ env.ZONE }}-spar-api | oc apply -f -

          # Follow any active rollouts (see deploymentconfigs)
          oc rollout status dc/${{ env.NAME }}-${{ env.ZONE }}-spar-api -w
          # Remove completed build runs, build pods and deployment pods
          for p in $(oc get po | grep "Completed" | awk '{print $1}')
          do
            oc delete po ${p}
          done

  zap-spar-api:
    name: Service API Pen Tests
    needs:
      - deploy-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.3.0
        with:
          target: https://${{ env.NAME }}-test-spar-api.apps.silver.devops.gov.bc.ca/
          cmd_options: "-a"
          allow_issue_writing: false
          fail_action: false

  api-tests:
    name: Newman API tests runner
    needs:
      - deploy-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install newman
        run: |
          npm install -g newman
          npm install -g newman-reporter-htmlextra

      - name: Make Directory for Test Results
        run: mkdir -p testArtifacts

      - name: Run Postman Collection
        run: |
          newman run test/postman/starting-api.postman_collection.json -e test/postman/starting-api.postman_environment.json \
            --env-var "releaseVer=test=${{ env.NR_SPAR_BACKEND_VERSION }}" \
            --env-var "authServer=${{ secrets.KEYCLOAK_SERVER_REALM }}" \
            --env-var "authClient=${{ secrets.KC_SERVICE_ACCOUNT_NAME }}" \
            --env-var "authClient=${{ secrets.KC_SERVICE_ACCOUNT_PASS }}" \
            --suppress-exit-code -r htmlextra --reporter-htmlextra-export testArtifacts/api-tests-report.html

      - name: Output the results
        uses: actions/upload-artifact@v2
        with:
          name: API test report
          path: testArtifacts

  # https://github.com/snyk/cli, https://github.com/snyk/actions
  # Note: using free tier - called late in pipeline to limit runs
  # Disabled snyk because it don't support Java 17 or Maven with JDK 17 yet

  # https://github.com/marketplace/actions/aqua-security-trivy
  trivy-repo:
    name: Repository Report
    needs:
      - zap-spar-api
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@0.3.0
        with:
          scan-type: "fs"
          format: "sarif"
          output: "trivy-results.sarif"
          ignore-unfixed: true
          severity: "CRITICAL,HIGH"
          security-checks: "vuln,secret,config"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

  image-spar-api:
    name: Service API Image Handling
    needs:
      - zap-spar-api
    outputs:
      build: ${{ steps.check.outputs.build }}
    env:
      COMPONENT: spar-api
      PREV: test
      ZONE: prod
    runs-on: ubuntu-latest
    steps:
      - name: Check for image changes
        id: check
        run: |
          # Vars
          IMG_PREV="${{ env.REGISTRY }}/${{ github.repository }}:${{ env.PREV }}-${{ env.COMPONENT }}"
          IMG_ZONE="${{ env.REGISTRY }}/${{ github.repository }}:${{ env.ZONE }}-${{ env.COMPONENT }}"
          # Pull previous image; grab SHA
          docker pull "${IMG_PREV}"
          SHA_PREV=$(docker inspect -f '{{.Id}}' "${IMG_PREV}")
          # Use blank SHA for promoted image, unless a real one exists instead
          docker pull "${IMG_ZONE}" && \
            SHA_ZONE=$(docker inspect -f '{{.Id}}' "${IMG_ZONE}") ||
            SHA_ZONE=""
          # Output SHAs
          echo -e "\n${IMG_PREV}: ${SHA_PREV}"
          echo -e "${IMG_ZONE}: ${SHA_ZONE}\n"
          # If different, then trigger updates
          if [[ "${SHA_PREV}" != "${SHA_ZONE}" ]]; then
            echo "::set-output name=build::true"
            echo "Image has changed"
            exit 0
          fi
          echo "Image promotion not required"
      - name: Promote Service API Image
        if: steps.check.outputs.build == 'true'
        uses: shrink/actions-docker-registry-tag@v2
        with:
          registry: ${{ env.REGISTRY }}
          repository: ${{ github.repository }}
          target: ${{ env.PREV }}-${{ env.COMPONENT }}
          tags: |
            ${{ env.ZONE }}-${{ env.COMPONENT }}

  deploy-prod:
    name: PROD Deployment
    needs:
      - image-spar-api
      - trivy-repo
      - release
    runs-on: ubuntu-latest
    environment:
      name: prod
    env:
      ZONE: prod
      PREV: test
      NR_SPAR_BACKEND_VERSION: ${{ needs.release.outputs.version }}
    steps:
      - name: Remove any stale images
        if: needs.image-spar-api.outputs.build == 'true'
        env:
          COMPONENT: spar-api
        run: |
          # Login to OpenShift and select project
          oc login --token=${{ secrets.OC_TOKEN }} --server=${{ secrets.OC_SERVER }}
          oc project ${{ secrets.OC_NAMESPACE }}
          oc delete is/${{ env.NAME }}-${{ env.ZONE}}-${{ env.COMPONENT }} || true

      - uses: actions/checkout@v3
      - name: Print NR_SPAR_BACKEND_VERSION env
        run: echo NR_SPAR_BACKEND_VERSION:prod-${{ env.NR_SPAR_BACKEND_VERSION }}
      - name: Deploy
        run: |
          # Login to OpenShift and select project
          oc login --token=${{ secrets.OC_TOKEN }} --server=${{ secrets.OC_SERVER }}
          oc project ${{ secrets.OC_NAMESPACE }}

          # Clear stale images for import/replacement
          if [ $(oc get is -l app=${{ env.NAME }}-${{ env.ZONE }} -o name | grep -v database | wc -l) -gt 0 ]; then
            oc delete is -l app=${{ env.NAME }}-${{ env.ZONE }}
          fi

          # Process and apply deployment templates
          #oc process -f .github/openshift/deploy.database.yml -p ZONE=${{ env.ZONE }} | oc apply -f -
          oc process -f .github/openshift/deploy.backend.yml -p ZONE=${{ env.ZONE }} \
            -p NR_SPAR_BACKEND_VERSION=prod-${{ env.NR_SPAR_BACKEND_VERSION }} \
            -p ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS }} \
            -p KEYCLOAK_REALM_URL=${{ secrets.KEYCLOAK_REALM_URL }} \
            -p PROMOTE=${{ github.repository }}:${{ env.PREV }}-spar-api | oc apply -f -

          # Follow any active rollouts (see deploymentconfigs)
          #oc rollout status dc/${{ env.NAME }}-${{ env.ZONE }}-database -w
          oc rollout status dc/${{ env.NAME }}-${{ env.ZONE }}-spar-api -w

          # Remove completed build runs, build pods and deployment pods
          for p in $(oc get po | grep "Completed" | awk '{print $1}')
          do
            oc delete po ${p}
          done

      - name: Promote Image to PROD
        uses: shrink/actions-docker-registry-tag@v2
        with:
          registry: ${{ env.REGISTRY }}
          repository: ${{ github.repository }}
          target: ${{ env.PREV }}-spar-api
          tags: |
            prod-spar-api

# # Uncomment to for development and troubleshooting
# # https://docs.github.com/en/actions/learn-github-actions/contexts
# view-context:
#   name: View GitHub Context
#   runs-on: ubuntu-latest
#   steps:
#     - name: Echo GitHub context
#       uses: satackey/action-js-inline@v0.0.2
#       with:
#         script: |
#           const github = require('@actions/github');
#           console.log(JSON.stringify(github, null, 2));
